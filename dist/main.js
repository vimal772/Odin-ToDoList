(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(537),r=n.n(o),a=n(645),c=n.n(a)()(r());c.push([e.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n.content {\n    height: 100vh;\n    width: auto;\n    display: grid;\n    grid-template-columns: 400px minmax(800px,1fr) 500px;\n}\n\n.card-1 {\n    background-color: white;\n    display: grid;\n    grid-template-rows: 100px 100px 1fr;\n}\n.card-1 > * {\n    margin: 20px;\n}\n.wrap-flex {\n    display: flex;\n    gap: 20px;\n    flex-direction: column;\n    justify-content: center;\n    align-items: start;\n}\n.wrap-flex > * {\n    margin: 0 auto;\n}\n\n.project-btn,\n.project-input {\n    width: 150px;\n    opacity: 0;\n}\n\n.opacity {\n    opacity: 1;\n}\n\n.wrapper > p{\n    font-size: 24px;\n}\n.project-list > * {\n    margin: 10px;\n    font-size: 18px;\n}\n.project-items {\n    list-style: none;\n}\n\n.active {\n    background-color: rgba(121, 120, 120,0.4);\n}\n\n.card2-wrap {\n    padding: 1rem;\n    display: grid;\n    grid-template-columns: 1fr;\n}\n\n.wrap-div {\n    display: grid;\n    grid-template-columns: repeat(4,1fr);\n    align-items: center;\n    justify-items: center;\n    border: 1px solid;\n}\n\n.content > * {\n    border: 1px solid;\n}\n\n.card-3 {\n    display: grid;\n    grid-template-rows: 1fr 100px;\n}\n\n.form-hidden {\n    opacity: 0;\n}\n\n.show-form {\n    justify-self: center;\n    align-self: center;\n}\n.show-form > button,\n.task-submitBtn {\n    width: 200px;\n    height: 50px;\n    border-radius: 10px;\n    border: 0px;\n\n}\n\n.add-project,\n.project-btn,\n.project-input {\n    width: 100%;\n    background-color: white;\n    border: 0px;\n    font-size: 1.2rem;\n    padding: 5px;\n}\n\n.project-input {\n    outline: none;\n    border-bottom: 1px solid;\n}\n\n.todo-form {\n    margin: 10px auto;\n    justify-content: center;\n    align-content: center;\n    justify-items: center;\n    align-items: center;\n    justify-self: center;\n    align-self: center;\n}\n\n.todo-form > form {\n    margin: 10px;\n}\n\n.todo-form > form > * {\n    font-size: 1.1rem;\n    margin: 10px 3px;\n}\n\n.task-submitBtn {\n    width: 100%;\n}\n\n.wrap-div {\n    font-size: 1.2rem;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,WAAW;IACX,aAAa;IACb,oDAAoD;AACxD;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,mCAAmC;AACvC;AACA;IACI,YAAY;AAChB;AACA;IACI,aAAa;IACb,SAAS;IACT,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;AACtB;AACA;IACI,cAAc;AAClB;;AAEA;;IAEI,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,eAAe;AACnB;AACA;IACI,YAAY;IACZ,eAAe;AACnB;AACA;IACI,gBAAgB;AACpB;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,aAAa;IACb,aAAa;IACb,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,oCAAoC;IACpC,mBAAmB;IACnB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,6BAA6B;AACjC;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,oBAAoB;IACpB,kBAAkB;AACtB;AACA;;IAEI,YAAY;IACZ,YAAY;IACZ,mBAAmB;IACnB,WAAW;;AAEf;;AAEA;;;IAGI,WAAW;IACX,uBAAuB;IACvB,WAAW;IACX,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,wBAAwB;AAC5B;;AAEA;IACI,iBAAiB;IACjB,uBAAuB;IACvB,qBAAqB;IACrB,qBAAqB;IACrB,mBAAmB;IACnB,oBAAoB;IACpB,kBAAkB;AACtB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,iBAAiB;AACrB",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n.content {\n    height: 100vh;\n    width: auto;\n    display: grid;\n    grid-template-columns: 400px minmax(800px,1fr) 500px;\n}\n\n.card-1 {\n    background-color: white;\n    display: grid;\n    grid-template-rows: 100px 100px 1fr;\n}\n.card-1 > * {\n    margin: 20px;\n}\n.wrap-flex {\n    display: flex;\n    gap: 20px;\n    flex-direction: column;\n    justify-content: center;\n    align-items: start;\n}\n.wrap-flex > * {\n    margin: 0 auto;\n}\n\n.project-btn,\n.project-input {\n    width: 150px;\n    opacity: 0;\n}\n\n.opacity {\n    opacity: 1;\n}\n\n.wrapper > p{\n    font-size: 24px;\n}\n.project-list > * {\n    margin: 10px;\n    font-size: 18px;\n}\n.project-items {\n    list-style: none;\n}\n\n.active {\n    background-color: rgba(121, 120, 120,0.4);\n}\n\n.card2-wrap {\n    padding: 1rem;\n    display: grid;\n    grid-template-columns: 1fr;\n}\n\n.wrap-div {\n    display: grid;\n    grid-template-columns: repeat(4,1fr);\n    align-items: center;\n    justify-items: center;\n    border: 1px solid;\n}\n\n.content > * {\n    border: 1px solid;\n}\n\n.card-3 {\n    display: grid;\n    grid-template-rows: 1fr 100px;\n}\n\n.form-hidden {\n    opacity: 0;\n}\n\n.show-form {\n    justify-self: center;\n    align-self: center;\n}\n.show-form > button,\n.task-submitBtn {\n    width: 200px;\n    height: 50px;\n    border-radius: 10px;\n    border: 0px;\n\n}\n\n.add-project,\n.project-btn,\n.project-input {\n    width: 100%;\n    background-color: white;\n    border: 0px;\n    font-size: 1.2rem;\n    padding: 5px;\n}\n\n.project-input {\n    outline: none;\n    border-bottom: 1px solid;\n}\n\n.todo-form {\n    margin: 10px auto;\n    justify-content: center;\n    align-content: center;\n    justify-items: center;\n    align-items: center;\n    justify-self: center;\n    align-self: center;\n}\n\n.todo-form > form {\n    margin: 10px;\n}\n\n.todo-form > form > * {\n    font-size: 1.1rem;\n    margin: 10px 3px;\n}\n\n.task-submitBtn {\n    width: 100%;\n}\n\n.wrap-div {\n    font-size: 1.2rem;\n}"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(c[d]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);o&&c[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},c=[],i=0;i<e.length;i++){var d=e[i],s=o.base?d[0]+o.base:d[0],l=a[s]||0,p="".concat(s," ").concat(l);a[s]=l+1;var A=n(p),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var m=r(u,o);o.byIndex=i,t.splice(i,0,{identifier:p,updater:m,references:1})}c.push(p)}return c}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=n(a[c]);t[i].references--}for(var d=o(e,r),s=0;s<a.length;s++){var l=n(a[s]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=d}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var o={};(()=>{n.d(o,{m:()=>E,j:()=>b});var e=n(379),t=n.n(e),r=n(795),a=n.n(r),c=n(569),i=n.n(c),d=n(565),s=n.n(d),l=n(216),p=n.n(l),A=n(589),u=n.n(A),m=n(426),C={};C.styleTagTransform=u(),C.setAttributes=s(),C.insert=i().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=p(),t()(m.Z,C),m.Z&&m.Z.locals&&m.Z.locals;const f=document.createElement("h1"),h=document.createElement("div");function g(e){const t=document.querySelector(".card-2");f.textContent=`${e} To-Do List`,t.appendChild(f),v(e)}function v(e){let t=b.projects[e].length;for(;h.hasChildNodes();)h.removeChild(h.firstChild);for(let n=0;n<t;n++)x(b.projects[e][n].title,b.projects[e][n].priority,b.projects[e][n].dueDate,b.projects[e][n].isCompleted)}function x(e,t,n,o){const r=document.querySelector(".card-2"),a=document.createElement("div");a.classList.add("wrap-div");const c=document.createElement("h2");c.textContent=e;const i=document.createElement("p");i.textContent=t,i.style.color="low"===t?"#FFD700":"medium"===t?"#FFA500":"#FF4500";const d=document.createElement("p");d.textContent=n;const s=document.createElement("p");s.textContent=o,a.appendChild(c),a.appendChild(i),a.appendChild(d),a.appendChild(s),h.appendChild(a),r.appendChild(h)}let y,I;h.classList.add("card2-wrap");const B=document.createElement("h1"),b=new class{constructor(){this.projects={}}addCategory(e){this.projects[e]||(this.projects[e]=[])}addProject(e,t,n,o,r){this.projects[e]||(this.projects[e]=[]);const a={title:t,priority:n,dueDate:o,isCompleted:r};this.projects[e].push(a)}returnProjects(){return this.projects}},E=Object.keys(b.projects);!function(){const e=document.querySelector("#content");e.classList.add("content");for(let t=0;t<3;t++){const n=document.createElement("div");n.setAttribute("class",`card-${t+1} content-card`),e.appendChild(n)}const t=document.createElement("h2");t.textContent="TO DO TRACKER";const n=document.createElement("div");n.classList.add("wrap-flex"),t.classList.add("project-title");const o=document.createElement("button");o.classList.add("add-project"),o.textContent="ADD PROJECTS";const r=document.createElement("input");r.setAttribute("type","text"),r.classList.add("project-input");const a=document.createElement("button");a.textContent="Submit",a.classList.add("project-btn"),o.addEventListener("click",(()=>{r.classList.toggle("opacity"),a.classList.toggle("opacity")}));const c=document.querySelector(".card-1");c.appendChild(t),n.appendChild(o),n.appendChild(r),n.appendChild(a),c.appendChild(n);const i=document.createElement("div");i.classList.add("wrapper");const d=document.createElement("p");function s(e){for(;i.hasChildNodes();)i.removeChild(i.firstChild);const t=document.createElement("ul");t.classList.add("project-list");for(let n=0;n<E.length;n++){const o=document.createElement("li");o.textContent=E[n],E[n]===e&&(o.classList.add("active"),g(e)),o.classList.add("project-items"),t.appendChild(o)}i.appendChild(d),i.appendChild(t),c.appendChild(i),function(){const e=document.querySelectorAll(".project-items");e.forEach((t=>{t.addEventListener("click",(()=>{e.forEach((e=>{e.classList.remove("active")})),y=t.textContent,g(y),t.classList.add("active")}))}))}()}d.textContent="Projects",s(),a.addEventListener("click",(()=>{const e=r.value;b.addCategory(e),E.includes(e)||E.push(e),s(e),r.value=""}))}(),function(){const e=document.querySelector(".card-3"),t=document.createElement("div"),n=document.createElement("div");t.classList.add("form-hidden"),t.classList.add("todo-form"),n.classList.add("show-form");const o=document.createElement("h2");o.textContent="Add New Task to the ToDo List",t.appendChild(o);const r=document.createElement("form");r.id="taskForm";const a=document.createElement("label");a.textContent="Title:",r.appendChild(a);const c=document.createElement("input");c.type="text",c.id="title",c.name="title",c.required=!0,r.appendChild(c),r.appendChild(document.createElement("br"));const i=document.createElement("label");i.textContent="Priority:",r.appendChild(i);const d=document.createElement("select");d.id="priority",d.name="priority";const s=["Low","Medium","High"];for(let e=0;e<s.length;e++){const t=document.createElement("option");t.value=s[e].toLowerCase(),t.textContent=s[e],"Medium"===s[e]&&(t.selected=!0),d.appendChild(t)}r.appendChild(d),r.appendChild(document.createElement("br"));const l=document.createElement("label");l.textContent="Status:",r.appendChild(l);const p=document.createElement("select");p.id="status",p.name="status";const A=["Completed","Not Completed"];for(let e=0;e<A.length;e++){const t=document.createElement("option");t.value=A[e].toLowerCase(),t.textContent=A[e],"Not Completed"===A[e]&&(t.selected=!0),p.appendChild(t)}r.appendChild(p),r.appendChild(document.createElement("br"));const u=document.createElement("label");u.textContent="Due Date:",r.appendChild(u);const m=document.createElement("input");m.type="date",m.id="dueDate",m.name="dueDate",r.appendChild(m),r.appendChild(document.createElement("br"));const C=document.createElement("input");C.classList.add("task-submitBtn"),C.type="button",C.value="Submit",r.appendChild(C),t.appendChild(r);const f=document.createElement("button");f.classList.add("card3-btn"),f.textContent="Add New ToDo",n.appendChild(f),e.appendChild(t),e.appendChild(n),document.querySelector(".card3-btn").addEventListener("click",(()=>{document.querySelector(".todo-form").classList.remove("form-hidden")})),document.querySelector(".task-submitBtn").addEventListener("click",(e=>{e.preventDefault(),function(e,t,n,o){if(""===e.trim())return void alert("enter the title");const r=document.querySelector(".active").textContent;console.log(r,e,t,o,n),b.addProject(r,e,t,o,n),v(r),function(e){console.log(1,e),I=e;const t=JSON.stringify(b);localStorage.setItem(e,t)}(r)}(document.querySelector("#title").value,document.querySelector("#priority").value,document.querySelector("#status").value,document.querySelector("#dueDate").value)}))}(),window.addEventListener("load",(()=>{!function(){let e,t=[];for(let n=0,o=localStorage.length;n<o;n++)console.log(n),t.push(localStorage.key(n)),e=JSON.parse(localStorage.getItem(localStorage.key(n)));!function(e,t,n){const o=document.createElement("p");o.textContent="Projects";const r=document.querySelector("#content > div.card-1.content-card > div.wrapper"),a=document.querySelector(".card-1");for(;r.hasChildNodes();)r.removeChild(r.firstChild);const c=document.createElement("ul");c.classList.add("project-list");for(let n=0;n<t.length;n++){const o=document.createElement("li");o.textContent=t[n],t[n]===e&&(o.classList.add("active"),getTitle(e)),o.classList.add("project-items"),c.appendChild(o)}r.appendChild(o),r.appendChild(c),a.appendChild(r),function(e,t){const n=document.querySelectorAll(".project-items");n.forEach((e=>{e.addEventListener("click",(()=>{n.forEach((e=>{e.classList.remove("active")})),function(e,t,n){const o=document.querySelector(".card-2");B.textContent=`${e} To-Do List`,o.appendChild(B),console.log(n.length);for(let e=0;e<n.length;e++)console.log(n[e]),v(n[e])}(e.textContent,0,t),e.classList.add("active")}))}))}(0,t)}(I,t)}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,