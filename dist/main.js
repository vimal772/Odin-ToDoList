(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),a=n(645),c=n.n(a)()(o());c.push([e.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n.content {\n    height: 100vh;\n    width: auto;\n    display: grid;\n    grid-template-columns: 400px minmax(800px,1fr) 500px;\n}\n\n.card-1 {\n    background-color: white;\n    display: grid;\n    grid-template-rows: 100px 100px 1fr;\n}\n.card-1 > * {\n    margin: 20px;\n}\n.wrap-flex {\n    display: flex;\n    gap: 20px;\n    flex-direction: column;\n    justify-content: center;\n    align-items: start;\n}\n\n.project-btn,\n.project-input {\n    width: 150px;\n    opacity: 0;\n}\n\n.opacity {\n    opacity: 1;\n}\n\n.wrapper > p{\n    font-size: 24px;\n}\n.project-list > * {\n    margin: 10px;\n    font-size: 18px;\n}\n.project-items {\n    list-style: none;\n}\n\n.active {\n    background-color: rgba(121, 120, 120,0.4);\n}\n\n.card2-wrap {\n    padding: 1rem;\n    display: grid;\n    grid-template-columns: 1fr;\n}\n\n.wrap-div {\n    display: grid;\n    grid-template-columns: repeat(4,1fr);\n    align-items: center;\n    justify-items: center;\n    border: 1px solid;\n}\n\n.content > * {\n    border: 1px solid;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,WAAW;IACX,aAAa;IACb,oDAAoD;AACxD;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,mCAAmC;AACvC;AACA;IACI,YAAY;AAChB;AACA;IACI,aAAa;IACb,SAAS;IACT,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;;IAEI,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,eAAe;AACnB;AACA;IACI,YAAY;IACZ,eAAe;AACnB;AACA;IACI,gBAAgB;AACpB;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,aAAa;IACb,aAAa;IACb,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,oCAAoC;IACpC,mBAAmB;IACnB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;AACrB",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n.content {\n    height: 100vh;\n    width: auto;\n    display: grid;\n    grid-template-columns: 400px minmax(800px,1fr) 500px;\n}\n\n.card-1 {\n    background-color: white;\n    display: grid;\n    grid-template-rows: 100px 100px 1fr;\n}\n.card-1 > * {\n    margin: 20px;\n}\n.wrap-flex {\n    display: flex;\n    gap: 20px;\n    flex-direction: column;\n    justify-content: center;\n    align-items: start;\n}\n\n.project-btn,\n.project-input {\n    width: 150px;\n    opacity: 0;\n}\n\n.opacity {\n    opacity: 1;\n}\n\n.wrapper > p{\n    font-size: 24px;\n}\n.project-list > * {\n    margin: 10px;\n    font-size: 18px;\n}\n.project-items {\n    list-style: none;\n}\n\n.active {\n    background-color: rgba(121, 120, 120,0.4);\n}\n\n.card2-wrap {\n    padding: 1rem;\n    display: grid;\n    grid-template-columns: 1fr;\n}\n\n.wrap-div {\n    display: grid;\n    grid-template-columns: repeat(4,1fr);\n    align-items: center;\n    justify-items: center;\n    border: 1px solid;\n}\n\n.content > * {\n    border: 1px solid;\n}"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&c[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},c=[],i=0;i<e.length;i++){var s=e[i],d=r.base?s[0]+r.base:s[0],l=a[d]||0,p="".concat(d," ").concat(l);a[d]=l+1;var A=n(p),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var m=o(u,r);r.byIndex=i,t.splice(i,0,{identifier:p,updater:m,references:1})}c.push(p)}return c}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=n(a[c]);t[i].references--}for(var s=r(e,o),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var r={};(()=>{n.d(r,{m:()=>j,j:()=>x});var e=n(379),t=n.n(e),o=n(795),a=n.n(o),c=n(569),i=n.n(c),s=n(565),d=n.n(s),l=n(216),p=n.n(l),A=n(589),u=n.n(A),m=n(426),f={};f.styleTagTransform=u(),f.setAttributes=d(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=p(),t()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const C=document.createElement("h1"),h=document.createElement("div");function y(e){const t=document.querySelector(".card-2");C.textContent=`${e} To-Do List`,t.appendChild(C),function(e){let t=x.projects[e].length;for(;h.hasChildNodes();)h.removeChild(h.firstChild);for(let n=0;n<t;n++){const t=x.projects[e][n].title,r=x.projects[e][n].priority,o=x.projects[e][n].dueDate,a=x.projects[e][n].isCompleted;v(t,r,o,a),console.log(t,r,o,a)}}(e)}function v(e,t,n,r){const o=document.querySelector(".card-2"),a=document.createElement("div");a.classList.add("wrap-div");const c=document.createElement("h2");c.textContent=e;const i=document.createElement("p");i.textContent=t;const s=document.createElement("p");s.textContent=n;const d=document.createElement("p");d.textContent=r,a.appendChild(c),a.appendChild(i),a.appendChild(s),a.appendChild(d),h.appendChild(a),o.appendChild(h)}let g;h.classList.add("card2-wrap");const x=new class{constructor(){this.projects={}}addCategory(e){this.projects[e]||(this.projects[e]=[])}addProject(e,t,n,r,o){this.projects[e]||(this.projects[e]=[]);const a={title:t,priority:n,dueDate:r,isCompleted:o};this.projects[e].push(a)}returnProjects(){return this.projects}};x.addProject("new","learn","low","now","true"),x.addProject("daily","sex","low","now","false"),x.addProject("weekly","porn","low","now","false"),x.addProject("monthly","fap","low","now","false"),x.addProject("Drink Water","hydrate","high","now","completed"),x.addProject("Drink Water","head water","medium","today","not completed"),x.addProject("Drink Water","refill","low","today","completed"),x.addProject("Drink Water","refill","low","today","completed"),x.addProject("Drink Water","refill","low","today","completed"),x.addProject("Drink Water","refill","low","today","completed"),x.addProject("Drink Water","refill","low","today","completed"),x.addProject("Drink Water","refill","low","today","completed");const j=Object.keys(x.projects);console.log(j),function(){const e=document.querySelector("#content");e.classList.add("content");for(let t=0;t<3;t++){const n=document.createElement("div");n.setAttribute("class",`card-${t+1} content-card`),e.appendChild(n)}const t=document.createElement("h2");t.textContent="TO DO TRACKER";const n=document.createElement("div");n.classList.add("wrap-flex"),t.classList.add("project-title");const r=document.createElement("button");r.classList.add("add-project"),r.textContent="ADD PROJECTS";const o=document.createElement("input");o.setAttribute("type","text"),o.classList.add("project-input");const a=document.createElement("button");a.textContent="Submit",a.classList.add("project-btn"),r.addEventListener("click",(()=>{o.classList.toggle("opacity"),a.classList.toggle("opacity")}));const c=document.querySelector(".card-1");c.appendChild(t),n.appendChild(r),n.appendChild(o),n.appendChild(a),c.appendChild(n);const i=document.createElement("div");i.classList.add("wrapper");const s=document.createElement("p");function d(){for(;i.hasChildNodes();)i.removeChild(i.firstChild);const e=document.createElement("ul");e.classList.add("project-list");for(let t=0;t<j.length;t++){const n=document.createElement("li");n.textContent=j[t],n.classList.add("project-items"),e.appendChild(n)}i.appendChild(s),i.appendChild(e),c.appendChild(i),function(){const e=document.querySelectorAll(".project-items");e.forEach((t=>{t.addEventListener("click",(()=>{e.forEach((e=>{e.classList.remove("active")})),g=t.textContent,y(g),t.classList.add("active")}))}))}()}s.textContent="Projects",d(),a.addEventListener("click",(()=>{const e=o.value;x.addCategory(e),j.push(e),d(),o.value=""}))}(),console.log(x.projects.daily[0].title)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,