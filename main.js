(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(537),r=n.n(o),a=n(645),c=n.n(a)()(r());c.push([e.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n.content {\n    height: 100vh;\n    width: auto;\n    display: grid;\n    grid-template-columns: 400px minmax(800px,1fr) 500px;\n}\n\n.card-1 {\n    background-color: white;\n    display: grid;\n    grid-template-rows: 100px 100px 1fr;\n}\n.card-1 > * {\n    margin: 20px;\n}\n.wrap-flex {\n    display: flex;\n    gap: 20px;\n    flex-direction: column;\n    justify-content: center;\n    align-items: start;\n}\n.wrap-flex > * {\n    margin: 0 auto;\n}\n\n.project-btn,\n.project-input {\n    width: 150px;\n    opacity: 0;\n}\n\n.opacity {\n    opacity: 1;\n}\n\n.wrapper > p{\n    font-size: 24px;\n}\n.project-list > * {\n    margin: 10px;\n    font-size: 18px;\n}\n.project-items {\n    list-style: none;\n}\n\n.active {\n    background-color: rgba(121, 120, 120,0.4);\n}\n\n.card2-wrap {\n    padding: 1rem;\n    display: grid;\n    grid-template-columns: 1fr;\n}\n\n.wrap-div {\n    display: grid;\n    grid-template-columns: repeat(4,1fr);\n    align-items: center;\n    justify-items: center;\n    border: 1px solid;\n}\n\n.content > * {\n    border: 1px solid;\n}\n\n.card-3 {\n    display: grid;\n    grid-template-rows: 1fr 100px;\n}\n\n.form-hidden {\n    opacity: 0;\n}\n\n.show-form {\n    justify-self: center;\n    align-self: center;\n}\n.show-form > button,\n.task-submitBtn {\n    width: 200px;\n    height: 50px;\n    border-radius: 10px;\n    border: 0px;\n\n}\n\n.add-project,\n.project-btn,\n.project-input {\n    width: 100%;\n    background-color: white;\n    border: 0px;\n    font-size: 1.2rem;\n    padding: 5px;\n}\n\n.project-input {\n    outline: none;\n    border-bottom: 1px solid;\n}\n\n.todo-form {\n    margin: 10px auto;\n    justify-content: center;\n    align-content: center;\n    justify-items: center;\n    align-items: center;\n    justify-self: center;\n    align-self: center;\n}\n\n.todo-form > form {\n    margin: 10px;\n}\n\n.todo-form > form > * {\n    font-size: 1.1rem;\n    margin: 10px 3px;\n}\n\n.task-submitBtn {\n    width: 100%;\n}\n\n.wrap-div {\n    font-size: 1.2rem;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,WAAW;IACX,aAAa;IACb,oDAAoD;AACxD;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,mCAAmC;AACvC;AACA;IACI,YAAY;AAChB;AACA;IACI,aAAa;IACb,SAAS;IACT,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;AACtB;AACA;IACI,cAAc;AAClB;;AAEA;;IAEI,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,eAAe;AACnB;AACA;IACI,YAAY;IACZ,eAAe;AACnB;AACA;IACI,gBAAgB;AACpB;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,aAAa;IACb,aAAa;IACb,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,oCAAoC;IACpC,mBAAmB;IACnB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,6BAA6B;AACjC;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,oBAAoB;IACpB,kBAAkB;AACtB;AACA;;IAEI,YAAY;IACZ,YAAY;IACZ,mBAAmB;IACnB,WAAW;;AAEf;;AAEA;;;IAGI,WAAW;IACX,uBAAuB;IACvB,WAAW;IACX,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,wBAAwB;AAC5B;;AAEA;IACI,iBAAiB;IACjB,uBAAuB;IACvB,qBAAqB;IACrB,qBAAqB;IACrB,mBAAmB;IACnB,oBAAoB;IACpB,kBAAkB;AACtB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,iBAAiB;AACrB",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n.content {\n    height: 100vh;\n    width: auto;\n    display: grid;\n    grid-template-columns: 400px minmax(800px,1fr) 500px;\n}\n\n.card-1 {\n    background-color: white;\n    display: grid;\n    grid-template-rows: 100px 100px 1fr;\n}\n.card-1 > * {\n    margin: 20px;\n}\n.wrap-flex {\n    display: flex;\n    gap: 20px;\n    flex-direction: column;\n    justify-content: center;\n    align-items: start;\n}\n.wrap-flex > * {\n    margin: 0 auto;\n}\n\n.project-btn,\n.project-input {\n    width: 150px;\n    opacity: 0;\n}\n\n.opacity {\n    opacity: 1;\n}\n\n.wrapper > p{\n    font-size: 24px;\n}\n.project-list > * {\n    margin: 10px;\n    font-size: 18px;\n}\n.project-items {\n    list-style: none;\n}\n\n.active {\n    background-color: rgba(121, 120, 120,0.4);\n}\n\n.card2-wrap {\n    padding: 1rem;\n    display: grid;\n    grid-template-columns: 1fr;\n}\n\n.wrap-div {\n    display: grid;\n    grid-template-columns: repeat(4,1fr);\n    align-items: center;\n    justify-items: center;\n    border: 1px solid;\n}\n\n.content > * {\n    border: 1px solid;\n}\n\n.card-3 {\n    display: grid;\n    grid-template-rows: 1fr 100px;\n}\n\n.form-hidden {\n    opacity: 0;\n}\n\n.show-form {\n    justify-self: center;\n    align-self: center;\n}\n.show-form > button,\n.task-submitBtn {\n    width: 200px;\n    height: 50px;\n    border-radius: 10px;\n    border: 0px;\n\n}\n\n.add-project,\n.project-btn,\n.project-input {\n    width: 100%;\n    background-color: white;\n    border: 0px;\n    font-size: 1.2rem;\n    padding: 5px;\n}\n\n.project-input {\n    outline: none;\n    border-bottom: 1px solid;\n}\n\n.todo-form {\n    margin: 10px auto;\n    justify-content: center;\n    align-content: center;\n    justify-items: center;\n    align-items: center;\n    justify-self: center;\n    align-self: center;\n}\n\n.todo-form > form {\n    margin: 10px;\n}\n\n.todo-form > form > * {\n    font-size: 1.1rem;\n    margin: 10px 3px;\n}\n\n.task-submitBtn {\n    width: 100%;\n}\n\n.wrap-div {\n    font-size: 1.2rem;\n}"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(c[d]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);o&&c[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},c=[],i=0;i<e.length;i++){var d=e[i],s=o.base?d[0]+o.base:d[0],l=a[s]||0,p="".concat(s," ").concat(l);a[s]=l+1;var A=n(p),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var m=r(u,o);o.byIndex=i,t.splice(i,0,{identifier:p,updater:m,references:1})}c.push(p)}return c}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=n(a[c]);t[i].references--}for(var d=o(e,r),s=0;s<a.length;s++){var l=n(a[s]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=d}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var o={};(()=>{n.d(o,{m:()=>b,j:()=>B});var e=n(379),t=n.n(e),r=n(795),a=n.n(r),c=n(569),i=n.n(c),d=n(565),s=n.n(d),l=n(216),p=n.n(l),A=n(589),u=n.n(A),m=n(426),C={};C.styleTagTransform=u(),C.setAttributes=s(),C.insert=i().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=p(),t()(m.Z,C),m.Z&&m.Z.locals&&m.Z.locals;const f=document.createElement("h1"),h=document.createElement("div");function g(e){const t=document.querySelector(".card-2");f.textContent=`${e} To-Do List`,t.appendChild(f),v(e)}function v(e){let t=B.projects[e].length;for(;h.hasChildNodes();)h.removeChild(h.firstChild);for(let n=0;n<t;n++)x(B.projects[e][n].title,B.projects[e][n].priority,B.projects[e][n].dueDate,B.projects[e][n].isCompleted)}function x(e,t,n,o){const r=document.querySelector(".card-2"),a=document.createElement("div");a.classList.add("wrap-div");const c=document.createElement("h2");c.textContent=e;const i=document.createElement("p");i.textContent=t,i.style.color="low"===t?"#FFD700":"medium"===t?"#FFA500":"#FF4500";const d=document.createElement("p");d.textContent=n;const s=document.createElement("p");s.textContent=o,a.appendChild(c),a.appendChild(i),a.appendChild(d),a.appendChild(s),h.appendChild(a),r.appendChild(h)}let y,I;h.classList.add("card2-wrap");const B=new class{constructor(){this.projects={}}addCategory(e){this.projects[e]||(this.projects[e]=[])}addProject(e,t,n,o,r){this.projects[e]||(this.projects[e]=[]);const a={title:t,priority:n,dueDate:o,isCompleted:r};this.projects[e].push(a)}returnProjects(){return this.projects}},b=Object.keys(B.projects);!function(){const e=document.querySelector("#content");e.classList.add("content");for(let t=0;t<3;t++){const n=document.createElement("div");n.setAttribute("class",`card-${t+1} content-card`),e.appendChild(n)}const t=document.createElement("h2");t.textContent="TO DO TRACKER";const n=document.createElement("div");n.classList.add("wrap-flex"),t.classList.add("project-title");const o=document.createElement("button");o.classList.add("add-project"),o.textContent="ADD PROJECTS";const r=document.createElement("input");r.setAttribute("type","text"),r.classList.add("project-input");const a=document.createElement("button");a.textContent="Submit",a.classList.add("project-btn"),o.addEventListener("click",(()=>{r.classList.toggle("opacity"),a.classList.toggle("opacity")}));const c=document.querySelector(".card-1");c.appendChild(t),n.appendChild(o),n.appendChild(r),n.appendChild(a),c.appendChild(n);const i=document.createElement("div");i.classList.add("wrapper");const d=document.createElement("p");function s(e){for(;i.hasChildNodes();)i.removeChild(i.firstChild);const t=document.createElement("ul");t.classList.add("project-list");for(let n=0;n<b.length;n++){const o=document.createElement("li");o.textContent=b[n],b[n]===e&&(o.classList.add("active"),g(e)),o.classList.add("project-items"),t.appendChild(o)}i.appendChild(d),i.appendChild(t),c.appendChild(i),function(){const e=document.querySelectorAll(".project-items");e.forEach((t=>{t.addEventListener("click",(()=>{e.forEach((e=>{e.classList.remove("active")})),y=t.textContent,g(y),t.classList.add("active")}))}))}()}d.textContent="Projects",s(),a.addEventListener("click",(()=>{const e=r.value;B.addCategory(e),b.includes(e)||b.push(e),s(e),r.value=""}))}(),function(){const e=document.querySelector(".card-3"),t=document.createElement("div"),n=document.createElement("div");t.classList.add("form-hidden"),t.classList.add("todo-form"),n.classList.add("show-form");const o=document.createElement("h2");o.textContent="Add New Task to the ToDo List",t.appendChild(o);const r=document.createElement("form");r.id="taskForm";const a=document.createElement("label");a.textContent="Title:",r.appendChild(a);const c=document.createElement("input");c.type="text",c.id="title",c.name="title",c.required=!0,r.appendChild(c),r.appendChild(document.createElement("br"));const i=document.createElement("label");i.textContent="Priority:",r.appendChild(i);const d=document.createElement("select");d.id="priority",d.name="priority";const s=["Low","Medium","High"];for(let e=0;e<s.length;e++){const t=document.createElement("option");t.value=s[e].toLowerCase(),t.textContent=s[e],"Medium"===s[e]&&(t.selected=!0),d.appendChild(t)}r.appendChild(d),r.appendChild(document.createElement("br"));const l=document.createElement("label");l.textContent="Status:",r.appendChild(l);const p=document.createElement("select");p.id="status",p.name="status";const A=["Completed","Not Completed"];for(let e=0;e<A.length;e++){const t=document.createElement("option");t.value=A[e].toLowerCase(),t.textContent=A[e],"Not Completed"===A[e]&&(t.selected=!0),p.appendChild(t)}r.appendChild(p),r.appendChild(document.createElement("br"));const u=document.createElement("label");u.textContent="Due Date:",r.appendChild(u);const m=document.createElement("input");m.type="date",m.id="dueDate",m.name="dueDate",r.appendChild(m),r.appendChild(document.createElement("br"));const C=document.createElement("input");C.classList.add("task-submitBtn"),C.type="button",C.value="Submit",r.appendChild(C),t.appendChild(r);const f=document.createElement("button");f.classList.add("card3-btn"),f.textContent="Add New ToDo",n.appendChild(f),e.appendChild(t),e.appendChild(n),document.querySelector(".card3-btn").addEventListener("click",(()=>{document.querySelector(".todo-form").classList.remove("form-hidden")})),document.querySelector(".task-submitBtn").addEventListener("click",(e=>{e.preventDefault(),function(e,t,n,o){if(""===e.trim())return void alert("enter the title");const r=document.querySelector(".active").textContent;console.log(r,e,t,o,n),B.addProject(r,e,t,o,n),v(r),function(e){console.log(1,e),I=e;const t=JSON.stringify(B);localStorage.setItem(e,t)}(r)}(document.querySelector("#title").value,document.querySelector("#priority").value,document.querySelector("#status").value,document.querySelector("#dueDate").value)}))}(),window.addEventListener("load",(()=>{!function(){let e,t=[];for(let n=0,o=localStorage.length;n<o;n++)console.log(n),t.push(localStorage.key(n)),e=JSON.parse(localStorage.getItem(localStorage.key(n)));!function(e,t,n){const o=document.createElement("p");o.textContent="Projects";const r=document.querySelector("#content > div.card-1.content-card > div.wrapper"),a=document.querySelector(".card-1");for(;r.hasChildNodes();)r.removeChild(r.firstChild);const c=document.createElement("ul");c.classList.add("project-list");for(let n=0;n<t.length;n++){const o=document.createElement("li");o.textContent=t[n],t[n]===e&&(o.classList.add("active"),getTitle(e)),o.classList.add("project-items"),c.appendChild(o)}r.appendChild(o),r.appendChild(c),a.appendChild(r),function(e,t){const n=document.querySelectorAll(".project-items");n.forEach((e=>{e.addEventListener("click",(()=>{n.forEach((e=>{e.classList.remove("active")})),function(e,t,n){const o=document.createElement("h1"),r=document.querySelector(".card-2");o.textContent=`${e} To-Do List`,r.appendChild(o),console.log(n.length);for(let e=0;e<n.length;e++)console.log(n[e]),v(n[e])}(e.textContent,0,t),e.classList.add("active")}))}))}(0,t)}(I,t)}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cENJL0MsQ0FBa0JoQixFQUFnQitELEVBQ3RDLENDRUlPLEVBQVMsRyIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL2NhcmQyLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvdWkuZGVzaWduLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbG9jYWxlU3RvcmFnZS5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvY2FyZDMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCoge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbi5jb250ZW50IHtcbiAgICBoZWlnaHQ6IDEwMHZoO1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA0MDBweCBtaW5tYXgoODAwcHgsMWZyKSA1MDBweDtcbn1cblxuLmNhcmQtMSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwMHB4IDEwMHB4IDFmcjtcbn1cbi5jYXJkLTEgPiAqIHtcbiAgICBtYXJnaW46IDIwcHg7XG59XG4ud3JhcC1mbGV4IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGdhcDogMjBweDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcbn1cbi53cmFwLWZsZXggPiAqIHtcbiAgICBtYXJnaW46IDAgYXV0bztcbn1cblxuLnByb2plY3QtYnRuLFxuLnByb2plY3QtaW5wdXQge1xuICAgIHdpZHRoOiAxNTBweDtcbiAgICBvcGFjaXR5OiAwO1xufVxuXG4ub3BhY2l0eSB7XG4gICAgb3BhY2l0eTogMTtcbn1cblxuLndyYXBwZXIgPiBwe1xuICAgIGZvbnQtc2l6ZTogMjRweDtcbn1cbi5wcm9qZWN0LWxpc3QgPiAqIHtcbiAgICBtYXJnaW46IDEwcHg7XG4gICAgZm9udC1zaXplOiAxOHB4O1xufVxuLnByb2plY3QtaXRlbXMge1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbi5hY3RpdmUge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTIxLCAxMjAsIDEyMCwwLjQpO1xufVxuXG4uY2FyZDItd3JhcCB7XG4gICAgcGFkZGluZzogMXJlbTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xufVxuXG4ud3JhcC1kaXYge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNCwxZnIpO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkO1xufVxuXG4uY29udGVudCA+ICoge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkO1xufVxuXG4uY2FyZC0zIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDEwMHB4O1xufVxuXG4uZm9ybS1oaWRkZW4ge1xuICAgIG9wYWNpdHk6IDA7XG59XG5cbi5zaG93LWZvcm0ge1xuICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbn1cbi5zaG93LWZvcm0gPiBidXR0b24sXG4udGFzay1zdWJtaXRCdG4ge1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBoZWlnaHQ6IDUwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBib3JkZXI6IDBweDtcblxufVxuXG4uYWRkLXByb2plY3QsXG4ucHJvamVjdC1idG4sXG4ucHJvamVjdC1pbnB1dCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyOiAwcHg7XG4gICAgZm9udC1zaXplOiAxLjJyZW07XG4gICAgcGFkZGluZzogNXB4O1xufVxuXG4ucHJvamVjdC1pbnB1dCB7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG59XG5cbi50b2RvLWZvcm0ge1xuICAgIG1hcmdpbjogMTBweCBhdXRvO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG59XG5cbi50b2RvLWZvcm0gPiBmb3JtIHtcbiAgICBtYXJnaW46IDEwcHg7XG59XG5cbi50b2RvLWZvcm0gPiBmb3JtID4gKiB7XG4gICAgZm9udC1zaXplOiAxLjFyZW07XG4gICAgbWFyZ2luOiAxMHB4IDNweDtcbn1cblxuLnRhc2stc3VibWl0QnRuIHtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuLndyYXAtZGl2IHtcbiAgICBmb250LXNpemU6IDEuMnJlbTtcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxTQUFTO0lBQ1QsVUFBVTtJQUNWLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixXQUFXO0lBQ1gsYUFBYTtJQUNiLG9EQUFvRDtBQUN4RDs7QUFFQTtJQUNJLHVCQUF1QjtJQUN2QixhQUFhO0lBQ2IsbUNBQW1DO0FBQ3ZDO0FBQ0E7SUFDSSxZQUFZO0FBQ2hCO0FBQ0E7SUFDSSxhQUFhO0lBQ2IsU0FBUztJQUNULHNCQUFzQjtJQUN0Qix1QkFBdUI7SUFDdkIsa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSxjQUFjO0FBQ2xCOztBQUVBOztJQUVJLFlBQVk7SUFDWixVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxlQUFlO0FBQ25CO0FBQ0E7SUFDSSxZQUFZO0lBQ1osZUFBZTtBQUNuQjtBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0kseUNBQXlDO0FBQzdDOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGFBQWE7SUFDYiwwQkFBMEI7QUFDOUI7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isb0NBQW9DO0lBQ3BDLG1CQUFtQjtJQUNuQixxQkFBcUI7SUFDckIsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLDZCQUE2QjtBQUNqQzs7QUFFQTtJQUNJLFVBQVU7QUFDZDs7QUFFQTtJQUNJLG9CQUFvQjtJQUNwQixrQkFBa0I7QUFDdEI7QUFDQTs7SUFFSSxZQUFZO0lBQ1osWUFBWTtJQUNaLG1CQUFtQjtJQUNuQixXQUFXOztBQUVmOztBQUVBOzs7SUFHSSxXQUFXO0lBQ1gsdUJBQXVCO0lBQ3ZCLFdBQVc7SUFDWCxpQkFBaUI7SUFDakIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGFBQWE7SUFDYix3QkFBd0I7QUFDNUI7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsdUJBQXVCO0lBQ3ZCLHFCQUFxQjtJQUNyQixxQkFBcUI7SUFDckIsbUJBQW1CO0lBQ25CLG9CQUFvQjtJQUNwQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGlCQUFpQjtBQUNyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4uY29udGVudCB7XFxuICAgIGhlaWdodDogMTAwdmg7XFxuICAgIHdpZHRoOiBhdXRvO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDQwMHB4IG1pbm1heCg4MDBweCwxZnIpIDUwMHB4O1xcbn1cXG5cXG4uY2FyZC0xIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMTAwcHggMTAwcHggMWZyO1xcbn1cXG4uY2FyZC0xID4gKiB7XFxuICAgIG1hcmdpbjogMjBweDtcXG59XFxuLndyYXAtZmxleCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGdhcDogMjBweDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcXG59XFxuLndyYXAtZmxleCA+ICoge1xcbiAgICBtYXJnaW46IDAgYXV0bztcXG59XFxuXFxuLnByb2plY3QtYnRuLFxcbi5wcm9qZWN0LWlucHV0IHtcXG4gICAgd2lkdGg6IDE1MHB4O1xcbiAgICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4ub3BhY2l0eSB7XFxuICAgIG9wYWNpdHk6IDE7XFxufVxcblxcbi53cmFwcGVyID4gcHtcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcbn1cXG4ucHJvamVjdC1saXN0ID4gKiB7XFxuICAgIG1hcmdpbjogMTBweDtcXG4gICAgZm9udC1zaXplOiAxOHB4O1xcbn1cXG4ucHJvamVjdC1pdGVtcyB7XFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbi5hY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEyMSwgMTIwLCAxMjAsMC40KTtcXG59XFxuXFxuLmNhcmQyLXdyYXAge1xcbiAgICBwYWRkaW5nOiAxcmVtO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG59XFxuXFxuLndyYXAtZGl2IHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNCwxZnIpO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkO1xcbn1cXG5cXG4uY29udGVudCA+ICoge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZDtcXG59XFxuXFxuLmNhcmQtMyB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDEwMHB4O1xcbn1cXG5cXG4uZm9ybS1oaWRkZW4ge1xcbiAgICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4uc2hvdy1mb3JtIHtcXG4gICAganVzdGlmeS1zZWxmOiBjZW50ZXI7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG59XFxuLnNob3ctZm9ybSA+IGJ1dHRvbixcXG4udGFzay1zdWJtaXRCdG4ge1xcbiAgICB3aWR0aDogMjAwcHg7XFxuICAgIGhlaWdodDogNTBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgYm9yZGVyOiAwcHg7XFxuXFxufVxcblxcbi5hZGQtcHJvamVjdCxcXG4ucHJvamVjdC1idG4sXFxuLnByb2plY3QtaW5wdXQge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGJvcmRlcjogMHB4O1xcbiAgICBmb250LXNpemU6IDEuMnJlbTtcXG4gICAgcGFkZGluZzogNXB4O1xcbn1cXG5cXG4ucHJvamVjdC1pbnB1dCB7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZDtcXG59XFxuXFxuLnRvZG8tZm9ybSB7XFxuICAgIG1hcmdpbjogMTBweCBhdXRvO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxufVxcblxcbi50b2RvLWZvcm0gPiBmb3JtIHtcXG4gICAgbWFyZ2luOiAxMHB4O1xcbn1cXG5cXG4udG9kby1mb3JtID4gZm9ybSA+ICoge1xcbiAgICBmb250LXNpemU6IDEuMXJlbTtcXG4gICAgbWFyZ2luOiAxMHB4IDNweDtcXG59XFxuXFxuLnRhc2stc3VibWl0QnRuIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi53cmFwLWRpdiB7XFxuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5jb25zdCBoZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDEnKTtcbmNvbnN0IHdyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbndyYXAuY2xhc3NMaXN0LmFkZCgnY2FyZDItd3JhcCcpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGl0bGUodGl0bGUpIHtcbiAgICBjb25zdCBjYXJkMiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLTInKTtcbiAgICBoZWFkaW5nLnRleHRDb250ZW50ID0gYCR7dGl0bGV9IFRvLURvIExpc3RgO1xuICAgIGNhcmQyLmFwcGVuZENoaWxkKGhlYWRpbmcpO1xuICAgIFxuICAgIGdldFByb3BlcnR5KHRpdGxlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvcGVydHkoY3VycmVudE9iaikge1xuICAgIC8vIGNvbnNvbGUubG9nKGN1cnJlbnRPYmopO1xuICAgIC8vbmVlZCB0byBhZGQgY29uZGl0aW9uIGFuZCBsb29wIGZvciBleHRyYSBvYmplY3RcbiAgICBsZXQgbGVuZ3RoID0gdG9Eb0xpc3QucHJvamVjdHNbY3VycmVudE9ial0ubGVuZ3RoO1xuICAgIHdoaWxlKHdyYXAuaGFzQ2hpbGROb2RlcygpKXtcbiAgICAgICAgd3JhcC5yZW1vdmVDaGlsZCh3cmFwLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIGZvcihsZXQgaT0wO2k8bGVuZ3RoO2krKyl7XG5cbiAgICAgICAgY29uc3QgdGl0bGUgPSB0b0RvTGlzdC5wcm9qZWN0c1tjdXJyZW50T2JqXVtpXS50aXRsZTtcbiAgICAgICAgY29uc3QgcHJpb3JpdHkgPSB0b0RvTGlzdC5wcm9qZWN0c1tjdXJyZW50T2JqXVtpXS5wcmlvcml0eTtcbiAgICAgICAgY29uc3QgZHVlRGF0ZSA9IHRvRG9MaXN0LnByb2plY3RzW2N1cnJlbnRPYmpdW2ldLmR1ZURhdGU7ICAgIFxuICAgICAgICBjb25zdCBpc2NvbXBsZXRlZCA9IHRvRG9MaXN0LnByb2plY3RzW2N1cnJlbnRPYmpdW2ldLmlzQ29tcGxldGVkO1xuICAgICAgICBzaG93UHJvcGVydHkodGl0bGUscHJpb3JpdHksZHVlRGF0ZSxpc2NvbXBsZXRlZCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRpdGxlLHByaW9yaXR5LGR1ZURhdGUsaXNjb21wbGV0ZWQpO1xuICAgIH1cblxufVxuXG5mdW5jdGlvbiBzaG93UHJvcGVydHkodGl0bGUscHJpb3JpdHksZHVlRGF0ZSxpc0NvbXBsZXRlZCkge1xuICAgIGNvbnN0IGNhcmQyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmQtMicpO1xuXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoJ3dyYXAtZGl2Jyk7XG4gICAgY29uc3QgaDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgIGgyLnRleHRDb250ZW50ID0gdGl0bGU7XG4gICAgY29uc3QgcGFyYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBwYXJhLnRleHRDb250ZW50ID0gcHJpb3JpdHk7XG5cbiAgICBpZihwcmlvcml0eSA9PT0gJ2xvdycpe1xuICAgICAgICBwYXJhLnN0eWxlLmNvbG9yID0gJyNGRkQ3MDAnO1xuICAgIH1lbHNlIGlmKHByaW9yaXR5ID09PSAnbWVkaXVtJyl7XG4gICAgICAgIHBhcmEuc3R5bGUuY29sb3IgPSAnI0ZGQTUwMCc7XG4gICAgfWVsc2Uge1xuICAgICAgICBwYXJhLnN0eWxlLmNvbG9yID0gJyNGRjQ1MDAnO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgZGF0ZS50ZXh0Q29udGVudCA9IGR1ZURhdGU7XG4gICAgY29uc3QgaGFzQ29tcGxldGVkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGhhc0NvbXBsZXRlZC50ZXh0Q29udGVudCA9IGlzQ29tcGxldGVkO1xuICAgIFxuICAgIGRpdi5hcHBlbmRDaGlsZChoMik7XG4gICAgZGl2LmFwcGVuZENoaWxkKHBhcmEpO1xuICAgIGRpdi5hcHBlbmRDaGlsZChkYXRlKTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoaGFzQ29tcGxldGVkKTtcblxuICAgIHdyYXAuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICBjYXJkMi5hcHBlbmRDaGlsZCh3cmFwKTtcblxufSIsImltcG9ydCB7IHRvRG9MaXN0LHByb2plY3RzTGlzdCB9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRUaXRsZSB9IGZyb20gXCIuL2NhcmQyLmpzXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudCcpO1xuICAgIGNvbnRlbnQuY2xhc3NMaXN0LmFkZCgnY29udGVudCcpO1xuXG4gICAgZm9yKGxldCBpPTA7aTwzO2krKykge1xuICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLGBjYXJkLSR7aSsxfSBjb250ZW50LWNhcmRgKVxuICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGRpdik7XG4gICAgfVxuXG4gICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgIHRpdGxlLnRleHRDb250ZW50ID0gXCJUTyBETyBUUkFDS0VSXCI7XG4gICAgY29uc3Qgd3JhcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHdyYXAuY2xhc3NMaXN0LmFkZCgnd3JhcC1mbGV4Jyk7XG5cbiAgICB0aXRsZS5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LXRpdGxlJyk7XG4gICAgY29uc3QgY3JlYXRlUHJvamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGNyZWF0ZVByb2plY3QuY2xhc3NMaXN0LmFkZCgnYWRkLXByb2plY3QnKTtcbiAgICBjcmVhdGVQcm9qZWN0LnRleHRDb250ZW50ID0gJ0FERCBQUk9KRUNUUyc7XG5cbiAgICBjb25zdCBpbnB1dEJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgaW5wdXRCb3guc2V0QXR0cmlidXRlKCd0eXBlJywndGV4dCcpO1xuICAgIGlucHV0Qm94LmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtaW5wdXQnKTtcbiAgICBjb25zdCBpbnB1dEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGlucHV0QnRuLnRleHRDb250ZW50ID0gJ1N1Ym1pdCc7XG4gICAgaW5wdXRCdG4uY2xhc3NMaXN0LmFkZCgncHJvamVjdC1idG4nKTtcbiAgICBcbiAgICBcbiAgICBjcmVhdGVQcm9qZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoKSA9PiB7XG4gICAgICAgIGlucHV0Qm94LmNsYXNzTGlzdC50b2dnbGUoJ29wYWNpdHknKTtcbiAgICAgICAgaW5wdXRCdG4uY2xhc3NMaXN0LnRvZ2dsZSgnb3BhY2l0eScpO1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IGNhcmQxID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmQtMScpO1xuICAgIGNhcmQxLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICB3cmFwLmFwcGVuZENoaWxkKGNyZWF0ZVByb2plY3QpO1xuICAgIHdyYXAuYXBwZW5kQ2hpbGQoaW5wdXRCb3gpO1xuICAgIHdyYXAuYXBwZW5kQ2hpbGQoaW5wdXRCdG4pO1xuICAgIGNhcmQxLmFwcGVuZENoaWxkKHdyYXApO1xuICAgIFxuICAgIFxuICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3dyYXBwZXInKTtcbiAgICBjb25zdCBwYXJhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIHBhcmEudGV4dENvbnRlbnQgPSAnUHJvamVjdHMnO1xuICAgIGNyZWF0ZVByb2plY3RMaXN0KCk7XG4gICAgXG4gICAgaW5wdXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCgpID0+IHtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSBpbnB1dEJveC52YWx1ZTtcbiAgICAgICAgdG9Eb0xpc3QuYWRkQ2F0ZWdvcnkoY2F0ZWdvcnkpO1xuICAgICAgICBpZighcHJvamVjdHNMaXN0LmluY2x1ZGVzKGNhdGVnb3J5KSl7XG4gICAgICAgICAgICBwcm9qZWN0c0xpc3QucHVzaChjYXRlZ29yeSlcbiAgICAgICAgfVxuICAgICAgICBjcmVhdGVQcm9qZWN0TGlzdChjYXRlZ29yeSk7XG4gICAgICAgIGlucHV0Qm94LnZhbHVlID0gJyc7XG4gICAgICAgIFxuICAgIH0pXG5cbiAgICAvLyBjb25zdCBsaSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LWl0ZW1zJyk7XG4gICAgLy8gbGkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgXG4gICAgXG4gICAgZnVuY3Rpb24gY3JlYXRlUHJvamVjdExpc3QoY2F0ZWdvcnkpIHtcbiAgICAgICAgd2hpbGUod3JhcHBlci5oYXNDaGlsZE5vZGVzKCkpe1xuICAgICAgICAgICAgd3JhcHBlci5yZW1vdmVDaGlsZCh3cmFwcGVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVuT3JkZXJlZExpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgICAgICB1bk9yZGVyZWRMaXN0LmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtbGlzdCcpXG4gICAgICAgIGZvcihsZXQgaT0wO2k8cHJvamVjdHNMaXN0Lmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICAgIGxpc3RJdGVtLnRleHRDb250ZW50ID0gcHJvamVjdHNMaXN0W2ldO1xuICAgICAgICAgICAgaWYocHJvamVjdHNMaXN0W2ldID09PSBjYXRlZ29yeSl7XG4gICAgICAgICAgICAgICAgbGlzdEl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgZ2V0VGl0bGUoY2F0ZWdvcnkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXN0SXRlbS5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LWl0ZW1zJylcbiAgICAgICAgICAgIHVuT3JkZXJlZExpc3QuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChwYXJhKVxuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHVuT3JkZXJlZExpc3QpO1xuICAgICAgICBjYXJkMS5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgICAgICAgXG4gICAgICAgIGFjdGljZUNsYXNzKCk7XG4gICAgfVxufVxuXG5leHBvcnQgbGV0IGNhcmQyVGl0bGU7XG5cbmZ1bmN0aW9uIGFjdGljZUNsYXNzKCkge1xuICAgIGNvbnN0IGxpc3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3QtaXRlbXMnKTtcbiAgICAgICAgbGlzdHMuZm9yRWFjaCgobGlzdCk9PiB7XG4gICAgICAgICAgICBsaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoKT0+IHtcbiAgICAgICAgICAgICAgICBsaXN0cy5mb3JFYWNoKChpdGVtKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGNhcmQyVGl0bGUgPSBsaXN0LnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgIGdldFRpdGxlKGNhcmQyVGl0bGUpO1xuICAgICAgICAgICAgICAgIGxpc3QuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxufVxuXG5cbmV4cG9ydCB7c3RhcnR9OyIsImltcG9ydCB7IGdldFByb3BlcnR5IH0gZnJvbSBcIi4vY2FyZDIuanNcIjtcbmltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxubGV0IGdsb2JhbENhdGVnb3J5O1xuXG5leHBvcnQgZnVuY3Rpb24gcmV0cml2ZURhdGEocGFyc2VkVG9kbykge1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXNoRGF0YShjYXRlZ29yeSkge1xuICAgIGNvbnNvbGUubG9nKDEsIGNhdGVnb3J5KTtcbiAgICBnbG9iYWxDYXRlZ29yeSA9IGNhdGVnb3J5O1xuICAgIGNvbnN0IHRvRG9MaXN0X3NlcmlhbGl6ZWQgPSBKU09OLnN0cmluZ2lmeSh0b0RvTGlzdCk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oY2F0ZWdvcnksIHRvRG9MaXN0X3NlcmlhbGl6ZWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgICAvLyBjb25zdCB0b0RvTGlzdF9kZVNlcmlhbGl6ZWQgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCkpO1xuICAgIGxldCBrZXlBcnIgPSBbXTtcbiAgICBsZXQgdG9Eb0xpc3RfZGVTZXJpYWxpemVkO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxvY2FsU3RvcmFnZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25zb2xlLmxvZyhpKTtcbiAgICAgICAga2V5QXJyLnB1c2gobG9jYWxTdG9yYWdlLmtleShpKSk7XG4gICAgICAgIHRvRG9MaXN0X2RlU2VyaWFsaXplZCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0obG9jYWxTdG9yYWdlLmtleShpKSkpO1xuICAgIH1cbiAgICBcbiAgICBjcmVhdGVQcm9qZWN0TGlzdChnbG9iYWxDYXRlZ29yeSwga2V5QXJyLHRvRG9MaXN0X2RlU2VyaWFsaXplZCk7XG59XG5cblxuXG5mdW5jdGlvbiBjcmVhdGVQcm9qZWN0TGlzdChjYXRlZ29yeSwga2V5QXJyLHRvRG9MaXN0X2RlU2VyaWFsaXplZCkge1xuXG4gICAgY29uc3QgcGFyYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBwYXJhLnRleHRDb250ZW50ID0gJ1Byb2plY3RzJztcblxuXG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY29udGVudCA+IGRpdi5jYXJkLTEuY29udGVudC1jYXJkID4gZGl2LndyYXBwZXJcIilcbiAgICBjb25zdCBjYXJkMSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLTEnKTtcblxuICAgIHdoaWxlICh3cmFwcGVyLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICB3cmFwcGVyLnJlbW92ZUNoaWxkKHdyYXBwZXIuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIGNvbnN0IHVuT3JkZXJlZExpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgIHVuT3JkZXJlZExpc3QuY2xhc3NMaXN0LmFkZCgncHJvamVjdC1saXN0JylcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleUFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgIGxpc3RJdGVtLnRleHRDb250ZW50ID0ga2V5QXJyW2ldO1xuICAgICAgICBpZiAoa2V5QXJyW2ldID09PSBjYXRlZ29yeSkge1xuICAgICAgICAgICAgbGlzdEl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgICAgICBnZXRUaXRsZShjYXRlZ29yeSlcbiAgICAgICAgfVxuICAgICAgICBsaXN0SXRlbS5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LWl0ZW1zJylcbiAgICAgICAgdW5PcmRlcmVkTGlzdC5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XG4gICAgfVxuXG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChwYXJhKVxuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQodW5PcmRlcmVkTGlzdCk7XG4gICAgY2FyZDEuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG5cbiAgICBzaG93QWN0aWNlQ2xhc3ModG9Eb0xpc3RfZGVTZXJpYWxpemVkLGtleUFycik7XG5cbn1cblxuZnVuY3Rpb24gc2hvd0FjdGljZUNsYXNzKHRvRG9MaXN0LGtleUFycikge1xuICAgIGNvbnN0IGxpc3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3QtaXRlbXMnKTtcbiAgICBsaXN0cy5mb3JFYWNoKChsaXN0KSA9PiB7XG4gICAgICAgIGxpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBsaXN0cy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBsZXQgY2FyZDJUaXRsZSA9IGxpc3QudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICBnZXRDYXJkMlRpdGxlKGNhcmQyVGl0bGUsdG9Eb0xpc3Qsa2V5QXJyKTtcbiAgICAgICAgICAgIGxpc3QuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuXG5mdW5jdGlvbiBnZXRDYXJkMlRpdGxlKHRpdGxlLHRvRG9MaXN0LGtleUFycikge1xuICAgIGNvbnN0IGhlYWRpbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpO1xuICAgIGNvbnN0IGNhcmQyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmQtMicpO1xuICAgIGhlYWRpbmcudGV4dENvbnRlbnQgPSBgJHt0aXRsZX0gVG8tRG8gTGlzdGA7XG4gICAgY2FyZDIuYXBwZW5kQ2hpbGQoaGVhZGluZyk7XG5cbiAgICBjb25zb2xlLmxvZyhrZXlBcnIubGVuZ3RoKTtcbiAgICBmb3IobGV0IGk9MDtpPGtleUFyci5sZW5ndGg7aSsrKXtcbiAgICAgICAgY29uc29sZS5sb2coa2V5QXJyW2ldKTtcbiAgICAgICAgZ2V0UHJvcGVydHkoa2V5QXJyW2ldKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgJy4vc3R5bGUuY3NzJztcbmltcG9ydCB7IHN0YXJ0IH0gZnJvbSAnLi91aS5kZXNpZ24uanMnO1xuaW1wb3J0IHsgVG9Eb0xpc3QgfSBmcm9tIFwiLi9tb2R1bGUuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUNhcmQzIH0gZnJvbSBcIi4vY2FyZDMuanNcIjtcbmltcG9ydCB7IHJldHJpdmVEYXRhLGdldERhdGEgfSBmcm9tICcuL2xvY2FsZVN0b3JhZ2UuanMnO1xuXG5cblxuZXhwb3J0IGNvbnN0IHRvRG9MaXN0ID0gbmV3IFRvRG9MaXN0KCk7XG4vLyB0b0RvTGlzdC5hZGRQcm9qZWN0KCduZXcnLCdsZWFybicsJ2xvdycsJ25vdycsJ3RydWUnKTtcbi8vIHRvRG9MaXN0LmFkZFByb2plY3QoJ2RhaWx5Jywnc2V4JywnbG93Jywnbm93JywnZmFsc2UnKTtcbi8vIHRvRG9MaXN0LmFkZFByb2plY3QoJ3dlZWtseScsJ3Bvcm4nLCdsb3cnLCdub3cnLCdmYWxzZScpO1xuLy8gdG9Eb0xpc3QuYWRkUHJvamVjdCgnbW9udGhseScsJ2ZhcCcsJ2xvdycsJ25vdycsJ2ZhbHNlJyk7XG4vLyB0b0RvTGlzdC5hZGRQcm9qZWN0KCdEcmluayBXYXRlcicsJ2h5ZHJhdGUnLCdoaWdoJywnbm93JywnY29tcGxldGVkJyk7XG4vLyB0b0RvTGlzdC5hZGRQcm9qZWN0KCdEcmluayBXYXRlcicsJ2hlYWQgd2F0ZXInLCdtZWRpdW0nLCd0b2RheScsJ25vdCBjb21wbGV0ZWQnKTtcbi8vIHRvRG9MaXN0LmFkZFByb2plY3QoJ0RyaW5rIFdhdGVyJywncmVmaWxsJywnbG93JywndG9kYXknLCdjb21wbGV0ZWQnKTtcbi8vIHRvRG9MaXN0LmFkZFByb2plY3QoJ0RyaW5rIFdhdGVyJywncmVmaWxsJywnbG93JywndG9kYXknLCdjb21wbGV0ZWQnKTtcbi8vIHRvRG9MaXN0LmFkZFByb2plY3QoJ0RyaW5rIFdhdGVyJywncmVmaWxsJywnbG93JywndG9kYXknLCdjb21wbGV0ZWQnKTtcbi8vIHRvRG9MaXN0LmFkZFByb2plY3QoJ0RyaW5rIFdhdGVyJywncmVmaWxsJywnbG93JywndG9kYXknLCdjb21wbGV0ZWQnKTtcbi8vIHRvRG9MaXN0LmFkZFByb2plY3QoJ0RyaW5rIFdhdGVyJywncmVmaWxsJywnbG93JywndG9kYXknLCdjb21wbGV0ZWQnKTtcbi8vIHRvRG9MaXN0LmFkZFByb2plY3QoJ0RyaW5rIFdhdGVyJywncmVmaWxsJywnbG93JywndG9kYXknLCdjb21wbGV0ZWQnKTtcblxuZXhwb3J0IGNvbnN0IHByb2plY3RzTGlzdCA9IE9iamVjdC5rZXlzKHRvRG9MaXN0LnByb2plY3RzKSBcbi8vIGNvbnNvbGUubG9nKHByb2plY3RzTGlzdCk7XG4vLyBjb25zb2xlLmxvZyh0b0RvTGlzdC5wcm9qZWN0cyk7XG5cbnN0YXJ0KCk7XG4vLyBjcmVhdGVDYXJkKCk7XG5jcmVhdGVDYXJkMygpO1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCgpPT4ge1xuICAgIGdldERhdGEoKTtcbn0pXG4vLyByZXRyaXZlRGF0YSh0b0RvTGlzdF9kZVNlcmlhbGl6ZWQpOyIsImV4cG9ydCBmdW5jdGlvbiBzdGFydE1vZHVsZSgpIHtcbiAgICBcbn1cblxuZXhwb3J0IGNsYXNzIFRvRG9MaXN0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMucHJvamVjdHMgPSB7fTtcbiAgICB9XG4gIFxuICAgIGFkZENhdGVnb3J5KGNhdGVnb3J5KSB7XG4gICAgICAgIGlmICghdGhpcy5wcm9qZWN0c1tjYXRlZ29yeV0pIHtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdHNbY2F0ZWdvcnldID0gW107XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgYWRkUHJvamVjdChjYXRlZ29yeSx0aXRsZSxwcmlvcml0eSxkdWVEYXRlLGlzQ29tcGxldGVkKSB7XG4gICAgICAvLyBDcmVhdGUgdGhlIGNhdGVnb3J5IGFycmF5IGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICAgIGlmICghdGhpcy5wcm9qZWN0c1tjYXRlZ29yeV0pIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0c1tjYXRlZ29yeV0gPSBbXTtcbiAgICAgIH0gXG4gICAgICBjb25zdCBuZXdQcm9qZWN0ID0ge1xuICAgICAgICB0aXRsZSxcbiAgICAgICAgcHJpb3JpdHksXG4gICAgICAgIGR1ZURhdGUsXG4gICAgICAgIGlzQ29tcGxldGVkLFxuICAgICAgfTtcbiAgXG4gICAgICB0aGlzLnByb2plY3RzW2NhdGVnb3J5XS5wdXNoKG5ld1Byb2plY3QpO1xuICAgIH1cblxuICAgIHJldHVyblByb2plY3RzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0cztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRQcm9wZXJ0eSB9IGZyb20gXCIuL2NhcmQyLmpzXCI7XG5pbXBvcnQgeyBwdXNoRGF0YSB9IGZyb20gJy4vbG9jYWxlU3RvcmFnZS5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNhcmQzKCkge1xuICAgIGNvbnN0IGNhcmQzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmQtMycpO1xuICAgIFxuICAgIGNvbnN0IGRpdjEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBkaXYyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBkaXYxLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taGlkZGVuJyk7XG4gICAgZGl2MS5jbGFzc0xpc3QuYWRkKCd0b2RvLWZvcm0nKTtcbiAgICBkaXYyLmNsYXNzTGlzdC5hZGQoJ3Nob3ctZm9ybScpO1xuXG4gICAgY29uc3QgaGVhZGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gICAgaGVhZGluZy50ZXh0Q29udGVudCA9ICdBZGQgTmV3IFRhc2sgdG8gdGhlIFRvRG8gTGlzdCc7XG4gICAgZGl2MS5hcHBlbmRDaGlsZChoZWFkaW5nKTtcblxuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgZm9ybS5pZCA9ICd0YXNrRm9ybSc7XG5cbiAgICAvLyBDcmVhdGUgbGFiZWwgYW5kIGlucHV0IGZvciBUaXRsZVxuICAgIGNvbnN0IHRpdGxlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIHRpdGxlTGFiZWwudGV4dENvbnRlbnQgPSAnVGl0bGU6JztcbiAgICBmb3JtLmFwcGVuZENoaWxkKHRpdGxlTGFiZWwpO1xuXG4gICAgY29uc3QgdGl0bGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgdGl0bGVJbnB1dC50eXBlID0gJ3RleHQnO1xuICAgIHRpdGxlSW5wdXQuaWQgPSAndGl0bGUnO1xuICAgIHRpdGxlSW5wdXQubmFtZSA9ICd0aXRsZSc7XG4gICAgdGl0bGVJbnB1dC5yZXF1aXJlZCA9IHRydWU7XG4gICAgZm9ybS5hcHBlbmRDaGlsZCh0aXRsZUlucHV0KTtcblxuICAgIGZvcm0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKSk7XG5cbiAgICAvLyBDcmVhdGUgbGFiZWwgYW5kIHNlbGVjdCBmb3IgUHJpb3JpdHlcbiAgICBjb25zdCBwcmlvcml0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICBwcmlvcml0eUxhYmVsLnRleHRDb250ZW50ID0gJ1ByaW9yaXR5Oic7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChwcmlvcml0eUxhYmVsKTtcblxuICAgIGNvbnN0IHByaW9yaXR5U2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gICAgcHJpb3JpdHlTZWxlY3QuaWQgPSAncHJpb3JpdHknO1xuICAgIHByaW9yaXR5U2VsZWN0Lm5hbWUgPSAncHJpb3JpdHknO1xuXG4gICAgY29uc3QgcHJpb3JpdHlPcHRpb25zID0gWydMb3cnLCAnTWVkaXVtJywgJ0hpZ2gnXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJpb3JpdHlPcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgIG9wdGlvbi52YWx1ZSA9IHByaW9yaXR5T3B0aW9uc1tpXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gcHJpb3JpdHlPcHRpb25zW2ldO1xuXG4gICAgICBpZiAocHJpb3JpdHlPcHRpb25zW2ldID09PSAnTWVkaXVtJykge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlOyAvLyBTZXQgXCJNZWRpdW1cIiBhcyB0aGUgZGVmYXVsdCBzZWxlY3RlZCBvcHRpb25cbiAgICAgIH1cblxuICAgICAgcHJpb3JpdHlTZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICB9XG5cbiAgICBmb3JtLmFwcGVuZENoaWxkKHByaW9yaXR5U2VsZWN0KTtcblxuICAgIGZvcm0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKSk7XG5cbiAgICAvLyBDcmVhdGUgbGFiZWwgYW5kIHNlbGVjdCBmb3IgU3RhdHVzXG4gICAgY29uc3Qgc3RhdHVzTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIHN0YXR1c0xhYmVsLnRleHRDb250ZW50ID0gJ1N0YXR1czonO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoc3RhdHVzTGFiZWwpO1xuXG4gICAgY29uc3Qgc3RhdHVzU2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gICAgc3RhdHVzU2VsZWN0LmlkID0gJ3N0YXR1cyc7XG4gICAgc3RhdHVzU2VsZWN0Lm5hbWUgPSAnc3RhdHVzJztcblxuICAgIGNvbnN0IHN0YXR1c09wdGlvbnMgPSBbJ0NvbXBsZXRlZCcsICdOb3QgQ29tcGxldGVkJ107XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN0YXR1c09wdGlvbnMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgb3B0aW9uLnZhbHVlID0gc3RhdHVzT3B0aW9uc1tqXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gc3RhdHVzT3B0aW9uc1tqXTtcblxuICAgICAgaWYgKHN0YXR1c09wdGlvbnNbal0gPT09ICdOb3QgQ29tcGxldGVkJykge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlOyAvLyBTZXQgXCJOb3QgQ29tcGxldGVkXCIgYXMgdGhlIGRlZmF1bHQgc2VsZWN0ZWQgb3B0aW9uXG4gICAgICB9XG5cbiAgICAgIHN0YXR1c1NlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgIH1cblxuICAgIGZvcm0uYXBwZW5kQ2hpbGQoc3RhdHVzU2VsZWN0KTtcblxuICAgIGZvcm0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKSk7XG5cbiAgICAvLyBDcmVhdGUgbGFiZWwgYW5kIGlucHV0IGZvciBEdWUgRGF0ZVxuICAgIGNvbnN0IGR1ZURhdGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgZHVlRGF0ZUxhYmVsLnRleHRDb250ZW50ID0gJ0R1ZSBEYXRlOic7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChkdWVEYXRlTGFiZWwpO1xuXG4gICAgY29uc3QgZHVlRGF0ZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBkdWVEYXRlSW5wdXQudHlwZSA9ICdkYXRlJztcbiAgICBkdWVEYXRlSW5wdXQuaWQgPSAnZHVlRGF0ZSc7XG4gICAgZHVlRGF0ZUlucHV0Lm5hbWUgPSAnZHVlRGF0ZSc7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChkdWVEYXRlSW5wdXQpO1xuXG4gICAgZm9ybS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpKTtcblxuICAgIC8vIENyZWF0ZSBzdWJtaXQgYnV0dG9uXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBzdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCgndGFzay1zdWJtaXRCdG4nKVxuICAgIHN1Ym1pdEJ1dHRvbi50eXBlID0gJ2J1dHRvbic7XG4gICAgc3VibWl0QnV0dG9uLnZhbHVlID0gJ1N1Ym1pdCc7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChzdWJtaXRCdXR0b24pO1xuXG4gICAgLy8gQXBwZW5kIHRoZSBmb3JtIHRvIHRoZSBib2R5IG9mIHRoZSBkb2N1bWVudFxuICAgIGRpdjEuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cblxuICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGJ0bi5jbGFzc0xpc3QuYWRkKCdjYXJkMy1idG4nKVxuICAgIGJ0bi50ZXh0Q29udGVudCA9ICdBZGQgTmV3IFRvRG8nO1xuICAgIGRpdjIuYXBwZW5kQ2hpbGQoYnRuKTtcblxuICAgIGNhcmQzLmFwcGVuZENoaWxkKGRpdjEpO1xuICAgIGNhcmQzLmFwcGVuZENoaWxkKGRpdjIpO1xuXG4gICAgc2hvd0Zvcm0oKVxuICAgIGFkZFRhc2soKVxufVxuXG5mdW5jdGlvbiBzaG93Rm9ybSgpIHtcbiAgICBjb25zdCBidG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZDMtYnRuJylcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCgpPT4ge1xuICAgICAgICBjb25zdCBkaXYxID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvZG8tZm9ybScpO1xuICAgICAgICBkaXYxLmNsYXNzTGlzdC5yZW1vdmUoJ2Zvcm0taGlkZGVuJyk7XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gYWRkVGFzaygpIHtcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFzay1zdWJtaXRCdG4nKTtcbiAgICBzdWJtaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLChldmVudCk9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGdldFRhc2tWYWx1ZXMoKTtcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBnZXRUYXNrVmFsdWVzKCkge1xuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RpdGxlJykudmFsdWU7XG4gICAgY29uc3QgcHJpb3JpdHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJpb3JpdHknKS52YWx1ZTtcbiAgICBjb25zdCBzdGF0dXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3RhdHVzJykudmFsdWU7XG4gICAgY29uc3QgZHVlRGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNkdWVEYXRlJykudmFsdWU7XG4gICAgdmFsaWRhdGVGb3JtKHRpdGxlLHByaW9yaXR5LHN0YXR1cyxkdWVEYXRlKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVGb3JtKHRpdGxlLHByaW9yaXR5LHN0YXR1cyxkdWVEYXRlKSB7XG4gICAgLy8gY29uc3QgdmFsaWRhdGVBcnIgPSBbdGl0bGUsIHByaW9yaXR5LCBzdGF0dXMsIGR1ZURhdGVdLmV2ZXJ5KGFyZyA9PiBhcmcgIT09ICcnXG4gICAgLy8gY29uc29sZS5sb2codGl0bGUscHJpb3JpdHksc3RhdHVzLGR1ZURhdGUpO1xuICAgIGlmKHRpdGxlLnRyaW0oKSA9PT0gJycpe1xuICAgICAgICBhbGVydCgnZW50ZXIgdGhlIHRpdGxlJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjYXRlZ29yeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUnKS50ZXh0Q29udGVudDtcbiAgICBjb25zb2xlLmxvZyhjYXRlZ29yeSx0aXRsZSxwcmlvcml0eSxkdWVEYXRlLHN0YXR1cyk7XG4gICAgdG9Eb0xpc3QuYWRkUHJvamVjdChjYXRlZ29yeSx0aXRsZSxwcmlvcml0eSxkdWVEYXRlLHN0YXR1cyk7XG4gICAgZ2V0UHJvcGVydHkoY2F0ZWdvcnkpO1xuXG4gICAgcHVzaERhdGEoY2F0ZWdvcnkpO1xufSJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJsb2NhbHMiLCJoZWFkaW5nIiwid3JhcCIsInRpdGxlIiwiY2FyZDIiLCJ0ZXh0Q29udGVudCIsImdldFByb3BlcnR5IiwiY3VycmVudE9iaiIsInRvRG9MaXN0IiwicHJvamVjdHMiLCJoYXNDaGlsZE5vZGVzIiwic2hvd1Byb3BlcnR5IiwicHJpb3JpdHkiLCJkdWVEYXRlIiwiaXNDb21wbGV0ZWQiLCJkaXYiLCJjbGFzc0xpc3QiLCJhZGQiLCJoMiIsInBhcmEiLCJjb2xvciIsImRhdGUiLCJoYXNDb21wbGV0ZWQiLCJjYXJkMlRpdGxlIiwiZ2xvYmFsQ2F0ZWdvcnkiLCJjb25zdHJ1Y3RvciIsImFkZENhdGVnb3J5IiwiY2F0ZWdvcnkiLCJhZGRQcm9qZWN0IiwibmV3UHJvamVjdCIsInJldHVyblByb2plY3RzIiwicHJvamVjdHNMaXN0Iiwia2V5cyIsImNyZWF0ZVByb2plY3QiLCJpbnB1dEJveCIsImlucHV0QnRuIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRvZ2dsZSIsImNhcmQxIiwid3JhcHBlciIsImNyZWF0ZVByb2plY3RMaXN0IiwidW5PcmRlcmVkTGlzdCIsImxpc3RJdGVtIiwibGlzdHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImFjdGljZUNsYXNzIiwidmFsdWUiLCJpbmNsdWRlcyIsInN0YXJ0IiwiY2FyZDMiLCJkaXYxIiwiZGl2MiIsImZvcm0iLCJ0aXRsZUxhYmVsIiwidGl0bGVJbnB1dCIsInR5cGUiLCJuYW1lIiwicmVxdWlyZWQiLCJwcmlvcml0eUxhYmVsIiwicHJpb3JpdHlTZWxlY3QiLCJwcmlvcml0eU9wdGlvbnMiLCJvcHRpb24iLCJ0b0xvd2VyQ2FzZSIsInNlbGVjdGVkIiwic3RhdHVzTGFiZWwiLCJzdGF0dXNTZWxlY3QiLCJzdGF0dXNPcHRpb25zIiwiaiIsImR1ZURhdGVMYWJlbCIsImR1ZURhdGVJbnB1dCIsInN1Ym1pdEJ1dHRvbiIsImJ0biIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzdGF0dXMiLCJ0cmltIiwiYWxlcnQiLCJjb25zb2xlIiwibG9nIiwidG9Eb0xpc3Rfc2VyaWFsaXplZCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJwdXNoRGF0YSIsInZhbGlkYXRlRm9ybSIsImNyZWF0ZUNhcmQzIiwidG9Eb0xpc3RfZGVTZXJpYWxpemVkIiwia2V5QXJyIiwibGVuIiwicGFyc2UiLCJnZXRJdGVtIiwiZ2V0VGl0bGUiLCJnZXRDYXJkMlRpdGxlIiwic2hvd0FjdGljZUNsYXNzIiwiZ2V0RGF0YSJdLCJzb3VyY2VSb290IjoiIn0=